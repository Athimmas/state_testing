
    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: STATE_DUMMY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (STATE_DUMMY) [1/2=50.0%] state_test.F90(1,9)
  -> EXTERN: (1,9) for_set_reentrancy
  -> EXTERN: (23,12) for_random_number
  -> EXTERN: (24,12) for_random_number
  -> EXTERN: (25,12) for_random_number
  -> EXTERN: (26,12) for_random_number
  -> (28,12) STATE_DUMMY:STATE (isz = 1108) (sz = 1129)
     [[ Inlining inhibited by overrideable criterion  <1>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at state_test.F90(23,12)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at state_test.F90(23,12)
      remark #15388: vectorization support: reference tmix has aligned access
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 104 
      remark #15477: vector loop cost: 38.000 
      remark #15478: estimated potential speedup: 2.730 
      remark #15479: lightweight vector operations: 4 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15482: vectorized math library calls: 1 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1440
   LOOP END
LOOP END

LOOP BEGIN at state_test.F90(24,12)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at state_test.F90(24,12)
      remark #15388: vectorization support: reference temp1 has aligned access
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 104 
      remark #15477: vector loop cost: 38.000 
      remark #15478: estimated potential speedup: 2.730 
      remark #15479: lightweight vector operations: 4 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15482: vectorized math library calls: 1 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1440
   LOOP END
LOOP END

LOOP BEGIN at state_test.F90(25,12)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at state_test.F90(25,12)
      remark #15388: vectorization support: reference temp2 has aligned access
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 104 
      remark #15477: vector loop cost: 38.000 
      remark #15478: estimated potential speedup: 2.730 
      remark #15479: lightweight vector operations: 4 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15482: vectorized math library calls: 1 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1440
   LOOP END
LOOP END

LOOP BEGIN at state_test.F90(26,12)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at state_test.F90(26,12)
      remark #15388: vectorization support: reference temp3 has aligned access
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 104 
      remark #15477: vector loop cost: 38.000 
      remark #15478: estimated potential speedup: 2.730 
      remark #15479: lightweight vector operations: 4 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15482: vectorized math library calls: 1 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1440
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: STATE_DUMMY:STATE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (STATE_DUMMY:STATE) [2/2=100.0%] state_test.F90(33,12)
  -> EXTERN: (123,12) for_random_number
  -> EXTERN: (124,12) for_random_number
  -> EXTERN: (142,36) __powr8i4
  -> EXTERN: (152,12) omp_set_num_threads
  -> EXTERN: (154,20) omp_get_wtime
  -> EXTERN: (202,18) omp_get_wtime
  -> EXTERN: (277,18) omp_get_wtime
  -> EXTERN: (280,7) for_write_seq_lis_xmit
  -> EXTERN: (280,7) for_write_seq_lis
  -> EXTERN: (281,7) for_write_seq_lis_xmit
  -> EXTERN: (281,7) for_write_seq_lis
  -> EXTERN: (283,7) for_write_seq_lis
  -> EXTERN: (284,7) for_write_seq_lis
  -> EXTERN: (285,7) for_write_seq_lis
  -> EXTERN: (286,7) for_write_seq_lis
  -> EXTERN: (287,7) for_write_seq_lis
  -> EXTERN: (288,7) for_write_seq_lis
  -> EXTERN: (289,7) for_write_seq_lis
  -> EXTERN: (290,7) for_write_seq_lis
  -> EXTERN: (291,7) for_write_seq_lis


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at state_test.F90(163,7)
   remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED
OpenMP Construct at state_test.F90(211,7)
   remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at state_test.F90(117,7)
   remark #15388: vectorization support: reference tmin has aligned access
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 3.000 
   remark #15478: estimated potential speedup: 2.660 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
   remark #25015: Estimate of max trip count of loop=15
LOOP END

LOOP BEGIN at state_test.F90(118,7)
   remark #15388: vectorization support: reference tmax has aligned access
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 3.000 
   remark #15478: estimated potential speedup: 2.660 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
   remark #25015: Estimate of max trip count of loop=15
LOOP END

LOOP BEGIN at state_test.F90(119,7)
   remark #25408: memset generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
LOOP END

LOOP BEGIN at state_test.F90(120,7)
   remark #15388: vectorization support: reference smax has aligned access
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 3.000 
   remark #15478: estimated potential speedup: 2.660 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
   remark #25015: Estimate of max trip count of loop=15
LOOP END

LOOP BEGIN at state_test.F90(123,12)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at state_test.F90(123,12)
      remark #15388: vectorization support: reference _8.0.2_ptr.var has aligned access
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 104 
      remark #15477: vector loop cost: 38.000 
      remark #15478: estimated potential speedup: 2.730 
      remark #15479: lightweight vector operations: 4 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15482: vectorized math library calls: 1 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1440
   LOOP END
LOOP END

LOOP BEGIN at state_test.F90(124,12)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at state_test.F90(124,12)
      remark #15388: vectorization support: reference _8.0.2_ptr.var has aligned access
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 104 
      remark #15477: vector loop cost: 38.000 
      remark #15478: estimated potential speedup: 2.730 
      remark #15479: lightweight vector operations: 4 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15482: vectorized math library calls: 1 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1440
   LOOP END
LOOP END

LOOP BEGIN at state_test.F90(283,16)
   remark #25420: Collapsed with loop at line 283 
   remark #15388: vectorization support: reference _8.0.2_ptr.var has aligned access
   remark #15399: vectorization support: unroll factor set to 8
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 20.000 
   remark #15478: estimated potential speedup: 2.390 
   remark #15479: lightweight vector operations: 4 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
   remark #25015: Estimate of max trip count of loop=471420

   LOOP BEGIN at state_test.F90(283,16)
      remark #25421: Loop eliminated in Collapsing 

   LOOP END
LOOP END

LOOP BEGIN at state_test.F90(284,16)
   remark #25420: Collapsed with loop at line 284 
   remark #15388: vectorization support: reference _8.0.2_ptr.var has aligned access
   remark #15399: vectorization support: unroll factor set to 8
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 20.000 
   remark #15478: estimated potential speedup: 2.390 
   remark #15479: lightweight vector operations: 4 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
   remark #25015: Estimate of max trip count of loop=471420

   LOOP BEGIN at state_test.F90(284,16)
      remark #25421: Loop eliminated in Collapsing 

   LOOP END
LOOP END

LOOP BEGIN at state_test.F90(285,16)
   remark #25420: Collapsed with loop at line 285 
   remark #15388: vectorization support: reference _8.0.2_ptr.var has aligned access
   remark #15399: vectorization support: unroll factor set to 8
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 20.000 
   remark #15478: estimated potential speedup: 2.390 
   remark #15479: lightweight vector operations: 4 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
   remark #25015: Estimate of max trip count of loop=471420

   LOOP BEGIN at state_test.F90(285,16)
      remark #25421: Loop eliminated in Collapsing 

   LOOP END
LOOP END

LOOP BEGIN at state_test.F90(286,16)
   remark #25420: Collapsed with loop at line 286 
   remark #15388: vectorization support: reference _8.0.2_ptr.var has aligned access
   remark #15399: vectorization support: unroll factor set to 8
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 20.000 
   remark #15478: estimated potential speedup: 2.390 
   remark #15479: lightweight vector operations: 4 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
   remark #25015: Estimate of max trip count of loop=471420

   LOOP BEGIN at state_test.F90(286,16)
      remark #25421: Loop eliminated in Collapsing 

   LOOP END
LOOP END

LOOP BEGIN at state_test.F90(287,16)
<Peeled>
LOOP END

LOOP BEGIN at state_test.F90(287,16)
   remark #25420: Collapsed with loop at line 287 
   remark #15388: vectorization support: reference drhods has aligned access
   remark #15399: vectorization support: unroll factor set to 8
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 20.000 
   remark #15478: estimated potential speedup: 2.390 
   remark #15479: lightweight vector operations: 4 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
   remark #25015: Estimate of max trip count of loop=471420

   LOOP BEGIN at state_test.F90(287,16)
      remark #25421: Loop eliminated in Collapsing 

   LOOP END
LOOP END

LOOP BEGIN at state_test.F90(287,16)
<Remainder>
   remark #15388: vectorization support: reference drhods has aligned access
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at state_test.F90(287,16)
<Remainder>
LOOP END

LOOP BEGIN at state_test.F90(288,16)
<Peeled>
LOOP END

LOOP BEGIN at state_test.F90(288,16)
   remark #25420: Collapsed with loop at line 288 
   remark #15388: vectorization support: reference drhodt has aligned access
   remark #15399: vectorization support: unroll factor set to 8
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 20.000 
   remark #15478: estimated potential speedup: 2.390 
   remark #15479: lightweight vector operations: 4 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
   remark #25015: Estimate of max trip count of loop=471420

   LOOP BEGIN at state_test.F90(288,16)
      remark #25421: Loop eliminated in Collapsing 

   LOOP END
LOOP END

LOOP BEGIN at state_test.F90(288,16)
<Remainder>
   remark #15388: vectorization support: reference drhodt has aligned access
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at state_test.F90(288,16)
<Remainder>
LOOP END

LOOP BEGIN at state_test.F90(289,16)
<Peeled>
LOOP END

LOOP BEGIN at state_test.F90(289,16)
   remark #25420: Collapsed with loop at line 289 
   remark #15388: vectorization support: reference rhoout has aligned access
   remark #15399: vectorization support: unroll factor set to 8
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 20.000 
   remark #15478: estimated potential speedup: 2.390 
   remark #15479: lightweight vector operations: 4 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
   remark #25015: Estimate of max trip count of loop=471420

   LOOP BEGIN at state_test.F90(289,16)
      remark #25421: Loop eliminated in Collapsing 

   LOOP END
LOOP END

LOOP BEGIN at state_test.F90(289,16)
<Remainder>
   remark #15388: vectorization support: reference rhoout has aligned access
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at state_test.F90(289,16)
<Remainder>
LOOP END

LOOP BEGIN at state_test.F90(290,16)
<Peeled>
LOOP END

LOOP BEGIN at state_test.F90(290,16)
   remark #25420: Collapsed with loop at line 290 
   remark #15388: vectorization support: reference rhofull has aligned access
   remark #15399: vectorization support: unroll factor set to 8
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 20.000 
   remark #15478: estimated potential speedup: 2.390 
   remark #15479: lightweight vector operations: 4 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
   remark #25015: Estimate of max trip count of loop=471420

   LOOP BEGIN at state_test.F90(290,16)
      remark #25421: Loop eliminated in Collapsing 

   LOOP END
LOOP END

LOOP BEGIN at state_test.F90(290,16)
<Remainder>
   remark #15388: vectorization support: reference rhofull has aligned access
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at state_test.F90(290,16)
<Remainder>
LOOP END

LOOP BEGIN at state_test.F90(291,16)
   remark #25420: Collapsed with loop at line 291 
   remark #15388: vectorization support: reference _8.0.2_ptr.var has aligned access
   remark #15399: vectorization support: unroll factor set to 8
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 20.000 
   remark #15478: estimated potential speedup: 2.390 
   remark #15479: lightweight vector operations: 4 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
   remark #25015: Estimate of max trip count of loop=471420

   LOOP BEGIN at state_test.F90(291,16)
      remark #25421: Loop eliminated in Collapsing 

   LOOP END
LOOP END

LOOP BEGIN at state_test.F90(174,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at state_test.F90(178,7)
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(180,7) ]
      remark #15388: vectorization support: reference tempk has aligned access   [ state_test.F90(180,7) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(181,7) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(181,7) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(182,7) ]
      remark #15388: vectorization support: reference saltk has aligned access   [ state_test.F90(182,7) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(183,7) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(183,7) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(184,7) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(184,7) ]
      remark #15388: vectorization support: reference sqr has aligned access   [ state_test.F90(185,7) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(185,7) ]
      remark #15388: vectorization support: reference rhoout has aligned access   [ state_test.F90(192,7) ]
      remark #15388: vectorization support: reference drhodt has aligned access   [ state_test.F90(193,7) ]
      remark #15388: vectorization support: reference rhofull has aligned access   [ state_test.F90(194,7) ]
      remark #15388: vectorization support: reference drhods has aligned access   [ state_test.F90(195,7) ]
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 6 
      remark #15449: unmasked aligned unit stride stores: 10 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 101 
      remark #15477: vector loop cost: 36.000 
      remark #15478: estimated potential speedup: 2.800 
      remark #15479: lightweight vector operations: 40 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 5
      remark #25015: Estimate of max trip count of loop=1440
   LOOP END
LOOP END

LOOP BEGIN at state_test.F90(222,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at state_test.F90(226,7)
   <Predicate Optimized v7>
      remark #25422: Invariant Condition at line 240 hoisted out of this loop
      remark #25422: Invariant Condition at line 244 hoisted out of this loop
      remark #25422: Invariant Condition at line 248 hoisted out of this loop
      remark #25422: Invariant Condition at line 262 hoisted out of this loop
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference sqr has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference rhoout has aligned access   [ state_test.F90(241,11) ]
      remark #15388: vectorization support: reference rhofull has aligned access   [ state_test.F90(245,11) ]
      remark #15388: vectorization support: reference drhodt has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference sqr has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference drhods has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference sqr has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(270,10) ]
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 12 
      remark #15449: unmasked aligned unit stride stores: 4 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 258 
      remark #15477: vector loop cost: 127.500 
      remark #15478: estimated potential speedup: 2.020 
      remark #15479: lightweight vector operations: 177 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1440
   LOOP END

   LOOP BEGIN at state_test.F90(226,7)
   <Predicate Optimized v8>
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference sqr has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference rhoout has aligned access   [ state_test.F90(241,11) ]
      remark #15388: vectorization support: reference rhofull has aligned access   [ state_test.F90(245,11) ]
      remark #15388: vectorization support: reference drhodt has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference sqr has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(259,11) ]
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 10 
      remark #15449: unmasked aligned unit stride stores: 3 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 201 
      remark #15477: vector loop cost: 99.500 
      remark #15478: estimated potential speedup: 2.010 
      remark #15479: lightweight vector operations: 134 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1440
   LOOP END

   LOOP BEGIN at state_test.F90(226,7)
   <Predicate Optimized v9>
      remark #25422: Invariant Condition at line 262 hoisted out of this loop
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference sqr has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference rhoout has aligned access   [ state_test.F90(241,11) ]
      remark #15388: vectorization support: reference rhofull has aligned access   [ state_test.F90(245,11) ]
      remark #15388: vectorization support: reference drhods has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference sqr has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(270,10) ]
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 7 
      remark #15449: unmasked aligned unit stride stores: 3 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 183 
      remark #15477: vector loop cost: 93.500 
      remark #15478: estimated potential speedup: 1.950 
      remark #15479: lightweight vector operations: 124 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1440
   LOOP END

   LOOP BEGIN at state_test.F90(226,7)
   <Predicate Optimized v10>
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference sqr has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference rhoout has aligned access   [ state_test.F90(241,11) ]
      remark #15388: vectorization support: reference rhofull has aligned access   [ state_test.F90(245,11) ]
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 5 
      remark #15449: unmasked aligned unit stride stores: 2 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 127 
      remark #15477: vector loop cost: 65.500 
      remark #15478: estimated potential speedup: 1.930 
      remark #15479: lightweight vector operations: 81 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1440
   LOOP END

   LOOP BEGIN at state_test.F90(226,7)
   <Predicate Optimized v13>
      remark #25422: Invariant Condition at line 248 hoisted out of this loop
      remark #25422: Invariant Condition at line 262 hoisted out of this loop
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference sqr has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference rhoout has aligned access   [ state_test.F90(241,11) ]
      remark #15388: vectorization support: reference drhodt has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference sqr has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference drhods has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference sqr has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(270,10) ]
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 12 
      remark #15449: unmasked aligned unit stride stores: 3 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 252 
      remark #15477: vector loop cost: 124.500 
      remark #15478: estimated potential speedup: 2.020 
      remark #15479: lightweight vector operations: 172 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1440
   LOOP END

   LOOP BEGIN at state_test.F90(226,7)
   <Predicate Optimized v14>
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference sqr has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference rhoout has aligned access   [ state_test.F90(241,11) ]
      remark #15388: vectorization support: reference drhodt has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference sqr has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(259,11) ]
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 10 
      remark #15449: unmasked aligned unit stride stores: 2 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 195 
      remark #15477: vector loop cost: 96.500 
      remark #15478: estimated potential speedup: 2.020 
      remark #15479: lightweight vector operations: 129 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1440
   LOOP END

   LOOP BEGIN at state_test.F90(226,7)
   <Predicate Optimized v15>
      remark #25422: Invariant Condition at line 262 hoisted out of this loop
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference sqr has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference rhoout has aligned access   [ state_test.F90(241,11) ]
      remark #15388: vectorization support: reference drhods has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference sqr has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(270,10) ]
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 7 
      remark #15449: unmasked aligned unit stride stores: 2 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 177 
      remark #15477: vector loop cost: 90.500 
      remark #15478: estimated potential speedup: 1.950 
      remark #15479: lightweight vector operations: 119 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1440
   LOOP END

   LOOP BEGIN at state_test.F90(226,7)
   <Predicate Optimized v16>
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference sqr has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference rhoout has aligned access   [ state_test.F90(241,11) ]
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 5 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 120 
      remark #15477: vector loop cost: 62.500 
      remark #15478: estimated potential speedup: 1.910 
      remark #15479: lightweight vector operations: 76 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1440
   LOOP END

   LOOP BEGIN at state_test.F90(226,7)
   <Predicate Optimized v2>
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(229,7) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference sqr has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(238,11) ]
      remark #15388: vectorization support: reference rhofull has aligned access   [ state_test.F90(245,11) ]
      remark #15388: vectorization support: reference drhodt has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference sqr has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(259,11) ]
      remark #15388: vectorization support: reference drhods has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference sq has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference sqr has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(270,10) ]
      remark #15388: vectorization support: reference tq has aligned access   [ state_test.F90(270,10) ]
      remark #15301: SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 12 
      remark #15449: unmasked aligned unit stride stores: 3 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 322 
      remark #15477: vector loop cost: 126.000 
      remark #15478: estimated potential speedup: 2.550 
      remark #15479: lightweight vector operations: 175 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1440
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

state_test.F90(119,7):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (64, 0)
===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The compiler's heuristics predict that it is not profitable to inline the
    call.  Add "!DIR$ATTRIBUTES FORCEINLINE" to the declaration of the called 
    subprogram, or add "!DIR$ FORCEINLINE" before the call site.

